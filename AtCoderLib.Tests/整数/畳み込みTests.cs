using FluentAssertions;
using Xunit;

namespace AtCoderLib.整数
{
    public class 畳み込みTests
    {
        public static TheoryData 畳み込みLong_Data = new TheoryData<long[], long[], long[]>
        {
            { new long[]{ 1,2,3,4 }, new long[]{ 5,6,7,8,9 }, new long[]{ 5,16,34,60,70,70,59,36 } },
            { new long[]{ 1,2,3,4,5 }, new long[]{ 10,11,12,13,14,15 }, new long[]{ 10,31,64,110,170,185,184,166,130,75 } },
        };
        [Theory]
        [MemberData(nameof(畳み込みLong_Data))]
        public void 畳み込みLong(long[] arr, long[] brr, long[] expected)
        {
            Convolution.畳み込みLong(arr, brr).Should().Equal(expected);
        }

        public static TheoryData 畳み込みMod_Data = new TheoryData<long[], long[], int, long[]>
        {
            { new long[]{ 1,2,3,4 }, new long[]{ 5,6,7,8,9 }, 167772161, new long[]{ 5,16,34,60,70,70,59,36 } },
            { new long[]{ 1,2,3,4,5 }, new long[]{ 10,11,12,13,14,15 }, 167772161, new long[]{ 10,31,64,110,170,185,184,166,130,75 } },

            { new long[]{ 10000000 }, new long[]{ 10000000 }, 998244353, new long[]{ 871938225 } },
            {
                new long[]{ 72551224,897525823,468653687,193985327,826084493,727311752,877213560,974836963,739330652,57641384,249809274,921561574,415139773,793914852,829115776,302808177,414479959,38521443,661481469,554965444,584627973,821711286,858224545,439635516,36473541,748664595,430770585,320500655,16570572,142659559,315858609,771433435,845572424,178179478,591095587,206136311,905030870,894775520,148968493,890397852 },
                new long[]{ 131846522,840466765,324203646,73166623,62198430,625989889,149948643,466611220,904971464,441603333,769406762,359014495,474101883,392512905,399207037,70085268,214626390,77860522,17429622,606541802,415646499,258390648,604656856,319686774,186155278,530396455,38331175,967836517,791246050,824062331,509446767,199653483,662124801,870812773,867494115,862734696,348309598,905489893,915399573,285801455,780070417,616756952,975696015,388063182,240369083,800260930,817210044,852567165,888574975,594043215,71175843,862020522,906294405,981728189,960134458,575867919,118937945,399571386,296250950,734019630,83896639 },
                998244353,
                new long[]{ 949082431, 906382677, 702676673, 875990316, 739482630, 682965171, 727017044, 84719379, 629347540, 515726537, 899913152, 798041779, 857145157, 729141926, 485356072, 779671661, 534589640, 105640609, 584757651, 486263406, 479422980, 502881772, 398629066, 375682214, 300417077, 945082306, 986526780, 594275093, 665312951, 254189199, 752112510, 70864925, 167557689, 659510688, 527724210, 602623808, 699589805, 227998077, 688868223, 766145753, 770146555, 696003985, 964205919, 642761897, 731814760, 674725466, 661908135, 209396018, 976369892, 194154737, 242422078, 827858631, 676498208, 846460107, 953331904, 37042649, 147308249, 3950123, 158213101, 849123257, 865464490, 425543792, 360199094, 304074350, 168759745, 681451031, 355509401, 586218698, 127248179, 884544141, 366204604, 30882551, 498583888, 610356390, 505362734, 614312071, 905539164, 430318242, 58334556, 899379437, 706115590, 621250828, 331644573, 605777006, 52091082, 501537376, 596805484, 404853067, 923548085, 508701376, 516005052, 953145204, 106287137, 8440623, 366601459, 291943196, 281375494, 711417451, 718208558, 78504677 }
            },
            {
                new long[]{ 579796929,712822774,310929230,710583385,599477302,928388665,676743672,918502687,454092822,860733108,364349021,508830676,204560046,104672192,217090922,533324511,221199671,724465360,956018213,152471506,477705778,273547315,695990257,488060908,769018234,817216912,208160443,958291604,547056126,608639048,677794957,933813391,651432845,154363152,859841553,543297533,567441367,666429766,678407332,207106095,136740719,414557140,943299702,57324498,258684155,702952526,488670530,176835774,473771919,237060061,28485038,916515290,19409518,22456321,908321113,610700452,330781803,52109456,323400961,302412907,164323983,750947856,537054055 },
                new long[]{ 131846522,840466765,324203646,73166623,62198430,625989889,149948643,466611220,904971464,441603333,769406762,359014495,474101883,392512905,399207037,70085268,214626390,77860522,17429622,606541802,415646499,258390648,604656856,319686774,186155278,530396455,38331175,967836517,791246050,824062331,509446767,199653483,662124801,870812773,867494115,862734696,348309598,905489893,915399573,285801455,780070417,616756952,975696015,388063182,240369083,800260930,817210044,852567165,888574975,594043215,71175843,862020522,906294405,981728189,960134458,575867919,118937945,399571386,296250950,734019630,83896639 },
                998244353,
                new long[]{ 637334429, 863688738, 100510632, 190990539, 224838115, 92357609, 727071734, 105533123, 870161566, 118780459, 318883379, 168357944, 316723533, 226030661, 960753882, 283138094, 467643246, 836955512, 972328636, 675637570, 196736373, 592783928, 308480581, 905925372, 836599907, 548061137, 504213009, 488977716, 916846072, 789024205, 455813682, 694216342, 362998999, 207708611, 561231067, 793719658, 979905774, 17866953, 852795381, 475932069, 957136896, 639919289, 880788031, 51979945, 897804802, 431575064, 580361752, 748692559, 124131968, 684236173, 240181001, 200709417, 29688590, 418282270, 592534821, 763404287, 963622101, 781234892, 139735991, 210836860, 574093270, 754157230, 887208249, 942806865, 3831422, 863835525, 856181085, 431425121, 382455235, 439280203, 884272910, 957761667, 30789016, 938241345, 232024964, 861504465, 324735349, 130808446, 385437943, 81214384, 230442238, 347686133, 201816011, 211478792, 492004904, 327691584, 197290540, 293156483, 889724822, 615849624, 364937443, 50114855, 303449539, 648847763, 972497982, 991566995, 264194729, 789652891, 126477652, 870693099, 720099255, 380451174, 658797865, 821242934, 220123777, 859481106, 166711093, 598915873, 693874512, 97655932, 713473908, 664412069, 371008866, 57081762, 145448143, 200904377, 338884745, 921890522, 729331049, 891792097, 164970257, 409932791, 538104776 }
            },
        };
        [Theory]
        [MemberData(nameof(畳み込みMod_Data))]
        public void 畳み込みMod(long[] arr, long[] brr, int mod, long[] expected)
        {
            new Convolution(mod).畳み込み(arr, brr).Should().Equal(expected);
        }
    }
}
