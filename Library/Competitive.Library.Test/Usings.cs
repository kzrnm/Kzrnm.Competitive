global using FluentAssertions;
global using Xunit;
global using LongFenwickTree = AtCoder.FenwickTree<long>;
global using Mod998244353AffineTransformation = Kzrnm.Competitive.AffineTransformation<AtCoder.StaticModInt<AtCoder.Mod998244353>>;
global using DoubleAffineTransformation = Kzrnm.Competitive.AffineTransformation<double>;
global using Mod1000000007ArrayMatrix = Kzrnm.Competitive.ArrayMatrix<AtCoder.StaticModInt<AtCoder.Mod1000000007>>;
global using IntArrayMatrix = Kzrnm.Competitive.ArrayMatrix<int>;
global using FractionArrayMatrix = Kzrnm.Competitive.ArrayMatrix<Kzrnm.Competitive.Fraction>;
global using LongArrayMatrix = Kzrnm.Competitive.ArrayMatrix<long>;
global using BitMatrix64 = Kzrnm.Competitive.BitMatrix<ulong>;
global using IntFenwickTree2D = Kzrnm.Competitive.FenwickTree2D<int>;
global using IntFenwickTreeRange = Kzrnm.Competitive.FenwickTreeRange<int>;
global using FractionMatrix2x2 = Kzrnm.Competitive.Matrix2x2<Kzrnm.Competitive.Fraction>;
global using LongMatrix2x2 = Kzrnm.Competitive.Matrix2x2<long>;
global using FractionMatrix3x3 = Kzrnm.Competitive.Matrix3x3<Kzrnm.Competitive.Fraction>;
global using LongMatrix3x3 = Kzrnm.Competitive.Matrix3x3<long>;
global using FractionMatrix4x4 = Kzrnm.Competitive.Matrix4x4<Kzrnm.Competitive.Fraction>;
global using LongMatrix4x4 = Kzrnm.Competitive.Matrix4x4<long>;
global using StaticModInt1000000007Factor = Kzrnm.Competitive.ModIntFactor<AtCoder.StaticModInt<AtCoder.Mod1000000007>>;
global using MontgomeryModInt1000000007Factor = Kzrnm.Competitive.ModIntFactor<Kzrnm.Competitive.MontgomeryModInt<AtCoder.Mod1000000007>>;
global using DoublePolynomial = Kzrnm.Competitive.Polynomial<double>;
global using IntPolynomial = Kzrnm.Competitive.Polynomial<int>;
global using SetIntervalInt = Kzrnm.Competitive.SetInterval<int>;
global using SetIntervalClosedInt = Kzrnm.Competitive.SetIntervalClosed<int>;
global using IntSums = Kzrnm.Competitive.Sums<int>;
global using LongSums = Kzrnm.Competitive.Sums<long>;
global using IntSums2D = Kzrnm.Competitive.Sums2D<int>;
global using LongSums2D = Kzrnm.Competitive.Sums2D<long>;
global using LongWaveletMatrix2DWithFenwickTree = Kzrnm.Competitive.WaveletMatrix2DWithFenwickTree<int, long>;
global using LongWaveletMatrix2DWithSums = Kzrnm.Competitive.WaveletMatrix2DWithSums<int, long>;
global using LongWaveletMatrixWithFenwickTree = Kzrnm.Competitive.WaveletMatrixWithFenwickTree<int, long>;
global using LongWaveletMatrixWithSums = Kzrnm.Competitive.WaveletMatrixWithSums<int, long>;
global using IntWeightedUnionFind = Kzrnm.Competitive.WeightedUnionFind<int>;
global using WIntGraphBuilder = Kzrnm.Competitive.WGraphBuilder<int>;
global using WLongGraphBuilder = Kzrnm.Competitive.WGraphBuilder<long>;