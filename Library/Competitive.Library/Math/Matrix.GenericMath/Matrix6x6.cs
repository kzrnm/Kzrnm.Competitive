// <auto-generated>
// DO NOT CHANGE THIS FILE.
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Numerics;
using ™‚ = System.Runtime.CompilerServices.MethodImplAttribute;

namespace Kzrnm.Competitive
{
    public readonly struct Matrix6x6<T> : Internal.IMatrixOperator<Matrix6x6<T>>
        , IMultiplyOperators<Matrix6x6<T>, T, Matrix6x6<T>>
        where T : INumberBase<T>
    {
        public (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) Row0 => (V00, V01, V02, V03, V04, V05);
        public (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) Row1 => (V10, V11, V12, V13, V14, V15);
        public (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) Row2 => (V20, V21, V22, V23, V24, V25);
        public (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) Row3 => (V30, V31, V32, V33, V34, V35);
        public (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) Row4 => (V40, V41, V42, V43, V44, V45);
        public (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) Row5 => (V50, V51, V52, V53, V54, V55);
        internal readonly T
            V00, V01, V02, V03, V04, V05,
            V10, V11, V12, V13, V14, V15,
            V20, V21, V22, V23, V24, V25,
            V30, V31, V32, V33, V34, V35,
            V40, V41, V42, V43, V44, V45,
            V50, V51, V52, V53, V54, V55;
        [™‚(256)]
        public Matrix6x6(
            (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) row0,
            (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) row1,
            (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) row2,
            (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) row3,
            (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) row4,
            (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) row5
        )
        {
            (V00, V01, V02, V03, V04, V05) = row0;
            (V10, V11, V12, V13, V14, V15) = row1;
            (V20, V21, V22, V23, V24, V25) = row2;
            (V30, V31, V32, V33, V34, V35) = row3;
            (V40, V41, V42, V43, V44, V45) = row4;
            (V50, V51, V52, V53, V54, V55) = row5;
        }

        public static Matrix6x6<T> AdditiveIdentity => default;
        public static Matrix6x6<T> MultiplicativeIdentity => new(
            (T.MultiplicativeIdentity, T.AdditiveIdentity, T.AdditiveIdentity, T.AdditiveIdentity, T.AdditiveIdentity, T.AdditiveIdentity),
            (T.AdditiveIdentity, T.MultiplicativeIdentity, T.AdditiveIdentity, T.AdditiveIdentity, T.AdditiveIdentity, T.AdditiveIdentity),
            (T.AdditiveIdentity, T.AdditiveIdentity, T.MultiplicativeIdentity, T.AdditiveIdentity, T.AdditiveIdentity, T.AdditiveIdentity),
            (T.AdditiveIdentity, T.AdditiveIdentity, T.AdditiveIdentity, T.MultiplicativeIdentity, T.AdditiveIdentity, T.AdditiveIdentity),
            (T.AdditiveIdentity, T.AdditiveIdentity, T.AdditiveIdentity, T.AdditiveIdentity, T.MultiplicativeIdentity, T.AdditiveIdentity),
            (T.AdditiveIdentity, T.AdditiveIdentity, T.AdditiveIdentity, T.AdditiveIdentity, T.AdditiveIdentity, T.MultiplicativeIdentity));

        [™‚(256)] public static Matrix6x6<T> operator +(Matrix6x6<T> x) => x;
        [™‚(256)]
        public static Matrix6x6<T> operator -(Matrix6x6<T> x)
            => new(
            (x.V00, x.V01, x.V02, x.V03, x.V04, x.V05),
            (x.V10, x.V11, x.V12, x.V13, x.V14, x.V15),
            (x.V20, x.V21, x.V22, x.V23, x.V24, x.V25),
            (x.V30, x.V31, x.V32, x.V33, x.V34, x.V35),
            (x.V40, x.V41, x.V42, x.V43, x.V44, x.V45),
            (x.V50, x.V51, x.V52, x.V53, x.V54, x.V55));


        [™‚(256)]
        public static Matrix6x6<T> operator +(Matrix6x6<T> x, Matrix6x6<T> y)
            => new(
            (x.V00 + y.V00, x.V01 + y.V01, x.V02 + y.V02, x.V03 + y.V03, x.V04 + y.V04, x.V05 + y.V05),
            (x.V10 + y.V10, x.V11 + y.V11, x.V12 + y.V12, x.V13 + y.V13, x.V14 + y.V14, x.V15 + y.V15),
            (x.V20 + y.V20, x.V21 + y.V21, x.V22 + y.V22, x.V23 + y.V23, x.V24 + y.V24, x.V25 + y.V25),
            (x.V30 + y.V30, x.V31 + y.V31, x.V32 + y.V32, x.V33 + y.V33, x.V34 + y.V34, x.V35 + y.V35),
            (x.V40 + y.V40, x.V41 + y.V41, x.V42 + y.V42, x.V43 + y.V43, x.V44 + y.V44, x.V45 + y.V45),
            (x.V50 + y.V50, x.V51 + y.V51, x.V52 + y.V52, x.V53 + y.V53, x.V54 + y.V54, x.V55 + y.V55));
        [™‚(256)]
        public static Matrix6x6<T> operator -(Matrix6x6<T> x, Matrix6x6<T> y)
            => new(
            (x.V00 - y.V00, x.V01 - y.V01, x.V02 - y.V02, x.V03 - y.V03, x.V04 - y.V04, x.V05 - y.V05),
            (x.V10 - y.V10, x.V11 - y.V11, x.V12 - y.V12, x.V13 - y.V13, x.V14 - y.V14, x.V15 - y.V15),
            (x.V20 - y.V20, x.V21 - y.V21, x.V22 - y.V22, x.V23 - y.V23, x.V24 - y.V24, x.V25 - y.V25),
            (x.V30 - y.V30, x.V31 - y.V31, x.V32 - y.V32, x.V33 - y.V33, x.V34 - y.V34, x.V35 - y.V35),
            (x.V40 - y.V40, x.V41 - y.V41, x.V42 - y.V42, x.V43 - y.V43, x.V44 - y.V44, x.V45 - y.V45),
            (x.V50 - y.V50, x.V51 - y.V51, x.V52 - y.V52, x.V53 - y.V53, x.V54 - y.V54, x.V55 - y.V55));

        [™‚(256)]
        public static Matrix6x6<T> operator *(Matrix6x6<T> x, Matrix6x6<T> y)
            => new(
            (
                x.V00 * y.V00 + x.V01 * y.V10 + x.V02 * y.V20 + x.V03 * y.V30 + x.V04 * y.V40 + x.V05 * y.V50,
                x.V00 * y.V01 + x.V01 * y.V11 + x.V02 * y.V21 + x.V03 * y.V31 + x.V04 * y.V41 + x.V05 * y.V51,
                x.V00 * y.V02 + x.V01 * y.V12 + x.V02 * y.V22 + x.V03 * y.V32 + x.V04 * y.V42 + x.V05 * y.V52,
                x.V00 * y.V03 + x.V01 * y.V13 + x.V02 * y.V23 + x.V03 * y.V33 + x.V04 * y.V43 + x.V05 * y.V53,
                x.V00 * y.V04 + x.V01 * y.V14 + x.V02 * y.V24 + x.V03 * y.V34 + x.V04 * y.V44 + x.V05 * y.V54,
                x.V00 * y.V05 + x.V01 * y.V15 + x.V02 * y.V25 + x.V03 * y.V35 + x.V04 * y.V45 + x.V05 * y.V55
            ),
            (
                x.V10 * y.V00 + x.V11 * y.V10 + x.V12 * y.V20 + x.V13 * y.V30 + x.V14 * y.V40 + x.V15 * y.V50,
                x.V10 * y.V01 + x.V11 * y.V11 + x.V12 * y.V21 + x.V13 * y.V31 + x.V14 * y.V41 + x.V15 * y.V51,
                x.V10 * y.V02 + x.V11 * y.V12 + x.V12 * y.V22 + x.V13 * y.V32 + x.V14 * y.V42 + x.V15 * y.V52,
                x.V10 * y.V03 + x.V11 * y.V13 + x.V12 * y.V23 + x.V13 * y.V33 + x.V14 * y.V43 + x.V15 * y.V53,
                x.V10 * y.V04 + x.V11 * y.V14 + x.V12 * y.V24 + x.V13 * y.V34 + x.V14 * y.V44 + x.V15 * y.V54,
                x.V10 * y.V05 + x.V11 * y.V15 + x.V12 * y.V25 + x.V13 * y.V35 + x.V14 * y.V45 + x.V15 * y.V55
            ),
            (
                x.V20 * y.V00 + x.V21 * y.V10 + x.V22 * y.V20 + x.V23 * y.V30 + x.V24 * y.V40 + x.V25 * y.V50,
                x.V20 * y.V01 + x.V21 * y.V11 + x.V22 * y.V21 + x.V23 * y.V31 + x.V24 * y.V41 + x.V25 * y.V51,
                x.V20 * y.V02 + x.V21 * y.V12 + x.V22 * y.V22 + x.V23 * y.V32 + x.V24 * y.V42 + x.V25 * y.V52,
                x.V20 * y.V03 + x.V21 * y.V13 + x.V22 * y.V23 + x.V23 * y.V33 + x.V24 * y.V43 + x.V25 * y.V53,
                x.V20 * y.V04 + x.V21 * y.V14 + x.V22 * y.V24 + x.V23 * y.V34 + x.V24 * y.V44 + x.V25 * y.V54,
                x.V20 * y.V05 + x.V21 * y.V15 + x.V22 * y.V25 + x.V23 * y.V35 + x.V24 * y.V45 + x.V25 * y.V55
            ),
            (
                x.V30 * y.V00 + x.V31 * y.V10 + x.V32 * y.V20 + x.V33 * y.V30 + x.V34 * y.V40 + x.V35 * y.V50,
                x.V30 * y.V01 + x.V31 * y.V11 + x.V32 * y.V21 + x.V33 * y.V31 + x.V34 * y.V41 + x.V35 * y.V51,
                x.V30 * y.V02 + x.V31 * y.V12 + x.V32 * y.V22 + x.V33 * y.V32 + x.V34 * y.V42 + x.V35 * y.V52,
                x.V30 * y.V03 + x.V31 * y.V13 + x.V32 * y.V23 + x.V33 * y.V33 + x.V34 * y.V43 + x.V35 * y.V53,
                x.V30 * y.V04 + x.V31 * y.V14 + x.V32 * y.V24 + x.V33 * y.V34 + x.V34 * y.V44 + x.V35 * y.V54,
                x.V30 * y.V05 + x.V31 * y.V15 + x.V32 * y.V25 + x.V33 * y.V35 + x.V34 * y.V45 + x.V35 * y.V55
            ),
            (
                x.V40 * y.V00 + x.V41 * y.V10 + x.V42 * y.V20 + x.V43 * y.V30 + x.V44 * y.V40 + x.V45 * y.V50,
                x.V40 * y.V01 + x.V41 * y.V11 + x.V42 * y.V21 + x.V43 * y.V31 + x.V44 * y.V41 + x.V45 * y.V51,
                x.V40 * y.V02 + x.V41 * y.V12 + x.V42 * y.V22 + x.V43 * y.V32 + x.V44 * y.V42 + x.V45 * y.V52,
                x.V40 * y.V03 + x.V41 * y.V13 + x.V42 * y.V23 + x.V43 * y.V33 + x.V44 * y.V43 + x.V45 * y.V53,
                x.V40 * y.V04 + x.V41 * y.V14 + x.V42 * y.V24 + x.V43 * y.V34 + x.V44 * y.V44 + x.V45 * y.V54,
                x.V40 * y.V05 + x.V41 * y.V15 + x.V42 * y.V25 + x.V43 * y.V35 + x.V44 * y.V45 + x.V45 * y.V55
            ),
            (
                x.V50 * y.V00 + x.V51 * y.V10 + x.V52 * y.V20 + x.V53 * y.V30 + x.V54 * y.V40 + x.V55 * y.V50,
                x.V50 * y.V01 + x.V51 * y.V11 + x.V52 * y.V21 + x.V53 * y.V31 + x.V54 * y.V41 + x.V55 * y.V51,
                x.V50 * y.V02 + x.V51 * y.V12 + x.V52 * y.V22 + x.V53 * y.V32 + x.V54 * y.V42 + x.V55 * y.V52,
                x.V50 * y.V03 + x.V51 * y.V13 + x.V52 * y.V23 + x.V53 * y.V33 + x.V54 * y.V43 + x.V55 * y.V53,
                x.V50 * y.V04 + x.V51 * y.V14 + x.V52 * y.V24 + x.V53 * y.V34 + x.V54 * y.V44 + x.V55 * y.V54,
                x.V50 * y.V05 + x.V51 * y.V15 + x.V52 * y.V25 + x.V53 * y.V35 + x.V54 * y.V45 + x.V55 * y.V55
            )
            );

        [™‚(256)]
        public static Matrix6x6<T> operator *(Matrix6x6<T> m, T x)
            => new(
            (x * m.V00, x * m.V01, x * m.V02, x * m.V03, x * m.V04, x * m.V05),
            (x * m.V10, x * m.V11, x * m.V12, x * m.V13, x * m.V14, x * m.V15),
            (x * m.V20, x * m.V21, x * m.V22, x * m.V23, x * m.V24, x * m.V25),
            (x * m.V30, x * m.V31, x * m.V32, x * m.V33, x * m.V34, x * m.V35),
            (x * m.V40, x * m.V41, x * m.V42, x * m.V43, x * m.V44, x * m.V45),
            (x * m.V50, x * m.V51, x * m.V52, x * m.V53, x * m.V54, x * m.V55));

        /// <summary>
        /// 6ŽŸŒ³ƒxƒNƒgƒ‹‚É‚©‚¯‚é
        /// </summary>
        [™‚(256)]
        public static (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) operator *(Matrix6x6<T> mat, (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) vector) => mat.Multiply(vector);

        /// <summary>
        /// 6ŽŸŒ³ƒxƒNƒgƒ‹‚É‚©‚¯‚é
        /// </summary>
        [™‚(256)]
        public (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) Multiply((T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) vector) => Multiply(vector.Col0, vector.Col1, vector.Col2, vector.Col3, vector.Col4, vector.Col5);

        /// <summary>
        /// 6ŽŸŒ³ƒxƒNƒgƒ‹‚É‚©‚¯‚é
        /// </summary>
        [™‚(256)]
        public (T Col0, T Col1, T Col2, T Col3, T Col4, T Col5) Multiply(T v0, T v1, T v2, T v3, T v4, T v5)
                => (
                        V00 * v0 + V01 * v1 + V02 * v2 + V03 * v3 + V04 * v4 + V05 * v5,
                        V10 * v0 + V11 * v1 + V12 * v2 + V13 * v3 + V14 * v4 + V15 * v5,
                        V20 * v0 + V21 * v1 + V22 * v2 + V23 * v3 + V24 * v4 + V25 * v5,
                        V30 * v0 + V31 * v1 + V32 * v2 + V33 * v3 + V34 * v4 + V35 * v5,
                        V40 * v0 + V41 * v1 + V42 * v2 + V43 * v3 + V44 * v4 + V45 * v5,
                        V50 * v0 + V51 * v1 + V52 * v2 + V53 * v3 + V54 * v4 + V55 * v5
                   );

        [™‚(256)] public static bool operator ==(Matrix6x6<T> left, Matrix6x6<T> right) => left.Equals(right);
        [™‚(256)] public static bool operator !=(Matrix6x6<T> left, Matrix6x6<T> right) => !(left == right);
        [™‚(256)] public override bool Equals(object obj) => obj is Matrix6x6<T> x && Equals(x);

        [™‚(256)]
        public bool Equals(Matrix6x6<T> other) =>
            EqualityComparer<T>.Default.Equals(V00, other.V00) &&
            EqualityComparer<T>.Default.Equals(V01, other.V01) &&
            EqualityComparer<T>.Default.Equals(V02, other.V02) &&
            EqualityComparer<T>.Default.Equals(V03, other.V03) &&
            EqualityComparer<T>.Default.Equals(V04, other.V04) &&
            EqualityComparer<T>.Default.Equals(V05, other.V05) &&
            EqualityComparer<T>.Default.Equals(V10, other.V10) &&
            EqualityComparer<T>.Default.Equals(V11, other.V11) &&
            EqualityComparer<T>.Default.Equals(V12, other.V12) &&
            EqualityComparer<T>.Default.Equals(V13, other.V13) &&
            EqualityComparer<T>.Default.Equals(V14, other.V14) &&
            EqualityComparer<T>.Default.Equals(V15, other.V15) &&
            EqualityComparer<T>.Default.Equals(V20, other.V20) &&
            EqualityComparer<T>.Default.Equals(V21, other.V21) &&
            EqualityComparer<T>.Default.Equals(V22, other.V22) &&
            EqualityComparer<T>.Default.Equals(V23, other.V23) &&
            EqualityComparer<T>.Default.Equals(V24, other.V24) &&
            EqualityComparer<T>.Default.Equals(V25, other.V25) &&
            EqualityComparer<T>.Default.Equals(V30, other.V30) &&
            EqualityComparer<T>.Default.Equals(V31, other.V31) &&
            EqualityComparer<T>.Default.Equals(V32, other.V32) &&
            EqualityComparer<T>.Default.Equals(V33, other.V33) &&
            EqualityComparer<T>.Default.Equals(V34, other.V34) &&
            EqualityComparer<T>.Default.Equals(V35, other.V35) &&
            EqualityComparer<T>.Default.Equals(V40, other.V40) &&
            EqualityComparer<T>.Default.Equals(V41, other.V41) &&
            EqualityComparer<T>.Default.Equals(V42, other.V42) &&
            EqualityComparer<T>.Default.Equals(V43, other.V43) &&
            EqualityComparer<T>.Default.Equals(V44, other.V44) &&
            EqualityComparer<T>.Default.Equals(V45, other.V45) &&
            EqualityComparer<T>.Default.Equals(V50, other.V50) &&
            EqualityComparer<T>.Default.Equals(V51, other.V51) &&
            EqualityComparer<T>.Default.Equals(V52, other.V52) &&
            EqualityComparer<T>.Default.Equals(V53, other.V53) &&
            EqualityComparer<T>.Default.Equals(V54, other.V54) &&
            EqualityComparer<T>.Default.Equals(V55, other.V55);
        public override int GetHashCode()
        {
            HashCode hash = new();
            hash.Add(V00);
            hash.Add(V01);
            hash.Add(V02);
            hash.Add(V03);
            hash.Add(V04);
            hash.Add(V05);
            hash.Add(V10);
            hash.Add(V11);
            hash.Add(V12);
            hash.Add(V13);
            hash.Add(V14);
            hash.Add(V15);
            hash.Add(V20);
            hash.Add(V21);
            hash.Add(V22);
            hash.Add(V23);
            hash.Add(V24);
            hash.Add(V25);
            hash.Add(V30);
            hash.Add(V31);
            hash.Add(V32);
            hash.Add(V33);
            hash.Add(V34);
            hash.Add(V35);
            hash.Add(V40);
            hash.Add(V41);
            hash.Add(V42);
            hash.Add(V43);
            hash.Add(V44);
            hash.Add(V45);
            hash.Add(V50);
            hash.Add(V51);
            hash.Add(V52);
            hash.Add(V53);
            hash.Add(V54);
            hash.Add(V55);
            return hash.ToHashCode();
        }
    }
}

