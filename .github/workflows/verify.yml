name: verify

on:
  push:
    branches:
      - main
    paths:
      - "Library/**"
      - ".competitive-verifier/docs/**"
  pull_request:
    types: [opened, synchronize]
    paths:
      - "Library/**"
      - "!**.md"
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  NUGET_XMLDOC_MODE: skip
  WORKFLOW_BUILD_SLN: Library/Competitive.Library.sln

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            3.1.x
            6.0.x
      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Build.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Test
        run: dotnet test $WORKFLOW_BUILD_SLN

  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            3.1.x
            7.0.x
      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Build.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: setup CompetitiveVerifierCsResolver
        run: dotnet tool install -g CompetitiveVerifierCsResolver

      - name: Build
        run: dotnet build $WORKFLOW_BUILD_SLN -c Release
      - name: Unit test
        run: dotnet test $UNITTEST_CSPROJ --logger "CompetitiveVerifier;OutDirectory=${{runner.temp}}/VerifierCsUnitTestResult" --no-build  -c Release
        env:
          UNITTEST_CSPROJ: Library/Competitive.Library.Test/Competitive.Library.Test.csproj

      - name: Resolve netcoreapp3.1
        run: dotnet run --project $VERIFY_CSPROJ --framework $FRAMEWORK --no-launch-profile --no-build -c Release | tee "${{runner.temp}}/problems-$FRAMEWORK.json"
        env:
          VERIFY_CSPROJ: Library/LibraryChecker/LibraryChecker.csproj
          FRAMEWORK: netcoreapp3.1
      - name: Resolve net7.0
        run: dotnet run --project $VERIFY_CSPROJ --framework $FRAMEWORK --no-launch-profile --no-build -c Release | tee "${{runner.temp}}/problems-$FRAMEWORK.json"
        env:
          VERIFY_CSPROJ: Library/LibraryChecker/LibraryChecker.csproj
          FRAMEWORK: net7.0

      - name: cs-resolve
        uses: competitive-verifier/actions/cs-resolve@v1
        with:
          solution: ${{ env.WORKFLOW_BUILD_SLN }}
          output-path: verify_files.json
          include: Library/**
          exclude: |
            **/obj/**
            Library/Competitive.Library.Test/SourceExpanderTest.cs
            Library/LibraryChecker/BaseSolver/BaseSover.cs
            Library/LibraryChecker/Program.cs
          unittest-result: ${{runner.temp}}/VerifierCsUnitTestResult/*.csv
          problems: ${{runner.temp}}/problems-*.json
          msbuild-properties: Configuration=Release
      - name: Upload verify_files.json
        uses: competitive-verifier/actions/upload-verify-artifact@v1
        with:
          file: verify_files.json
      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: binary-${{github.sha}}
          path: Library/LibraryChecker/bin/Release

  verify:
    runs-on: ubuntu-latest
    needs: [setup]
    env:
      SPLIT_SIZE: 20
    strategy:
      matrix:
        # prettier-ignore
        index:
          ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09",
           "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up competitive-verifier
        uses: competitive-verifier/actions/setup@v1
        with:
          python-version: "3.9"
          cache-pip: true

      - name: Download verify_files.json
        uses: competitive-verifier/actions/download-verify-artifact@v1

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            3.0.x
            3.1.x
            7.0.x
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: binary-${{github.sha}}
          path: Library/LibraryChecker/bin/Release

      - name: Verify
        uses: competitive-verifier/actions/verify@v1
        with:
          destination: ${{runner.temp}}/result.json
          split-size: ${{ env.SPLIT_SIZE }}
          split-index: ${{ matrix.index }}
          timeout: 1200
        env:
          YUKICODER_TOKEN: ${{ secrets.YUKICODER_TOKEN }}
      - name: Upload result artifact
        uses: actions/upload-artifact@v3
        with:
          name: Result-${{ runner.os }}-${{ matrix.index }}
          path: ${{runner.temp}}/result.json
          retention-days: 1

  docs-and-check:
    runs-on: ubuntu-latest
    needs: [verify]
    steps:
      - uses: actions/checkout@v3

      - name: Download verify_files.json and all artifacts
        id: all-artifacts
        uses: competitive-verifier/actions/download-verify-artifact@v1
        with:
          download-all: true
          artifact-root: .artifacts/

      - name: Extract bundled
        shell: bash
        run: |
          rm -rf .competitive-verifier/bundled
          if test -d "$SRCDIR"; then
            mkdir -p .competitive-verifier/
            mv "$SRCDIR" .competitive-verifier/bundled
          else
            echo "$SRCDIR is not exists."
          fi
        env:
          SRCDIR: .artifacts/Bundled-${{ runner.os }}

      - name: Set up competitive-verifier
        uses: competitive-verifier/actions/setup@v1
        with:
          python-version: "3.9"
          cache-pip: true

      - name: Docs
        uses: competitive-verifier/actions/docs@v1
        with:
          verify-result: ${{ steps.all-artifacts.outputs.artifacts-root }}/Result-*/result.json
          destination: _jekyll
          write-summary: true

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: _jekyll
          destination: _site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: _site

      - name: Check
        uses: competitive-verifier/actions/check@v1
        with:
          verify-result: ${{ steps.all-artifacts.outputs.artifacts-root }}/Result-*/result.json
  deploy:
    if: (success() || failure()) && github.ref == 'refs/heads/master'
    needs: docs-and-check
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
